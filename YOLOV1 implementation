NOTE: For the datasets we will be using (JAAD, Caltech, citypersons) we will need a more powerful version such as YOLOv5 to actually train on these real datasets. 
Implementing the v5 is not much more difficult 






import torch #type: ignore
import torch.nn as nn  #type: ignore
import torch.optim as optim  #type: ignore
from torch.utils.data import DataLoader, TensorDataset  #type: ignore

# YOLOv1 model
class YOLOv1(nn.Module):
    def __init__(self, S=7, B=2, C=1):
        super(YOLOv1, self).__init__()
        self.S, self.B, self.C = S, B, C
        self.conv = nn.Sequential(
            nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3), nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(64, 192, kernel_size=3, padding=1), nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(192, 128, kernel_size=1), nn.ReLU(),
            nn.Conv2d(128, 256, kernel_size=3, padding=1), nn.ReLU(),
            nn.Conv2d(256, 256, kernel_size=1), nn.ReLU(),
            nn.Conv2d(256, 512, kernel_size=3, padding=1), nn.ReLU(),
            nn.MaxPool2d(2, 2),
        )
        self.fc = nn.Sequential(
    nn.Flatten(),
    nn.Linear(512 * 14 * 14, 4096), nn.ReLU(),
    nn.Linear(4096, S * S * (C + B * 5))
)


    def forward(self, x):
        x = self.conv(x)
        x = self.fc(x)
        return x.view(-1, self.S, self.S, self.C + self.B * 5)

# Training
def train(model, loader, optimizer, criterion, device, epochs=3):
    model.train()
    for epoch in range(epochs):
        total_loss = 0
        for imgs, targets in loader:
            imgs, targets = imgs.to(device), targets.to(device)
            preds = model(imgs)
            loss = criterion(preds, targets)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        print(f"Epoch {epoch+1}, Loss: {total_loss/len(loader):.4f}")

# Main block
if __name__ == "__main__":
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = YOLOv1().to(device)

    dummy_imgs = torch.randn(6, 3, 224, 224)
    dummy_labels = torch.randn(6, 7, 7, 11)

    dataset = TensorDataset(dummy_imgs, dummy_labels)
    loader = DataLoader(dataset, batch_size=2)

    optimizer = optim.Adam(model.parameters(), lr=1e-4)
    criterion = nn.MSELoss()

    train(model, loader, optimizer, criterion, device)
